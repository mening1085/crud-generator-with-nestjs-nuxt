<template>
  <UCard class="max-w-xl mx-auto mt-8">
    <template #header>
      <div class="text-xl font-bold">{{ formTitle }}</div>
    </template>
    <UForm :state="form" @submit="submit" class="space-y-4">
      {{#each fields}}
      <div>
        <label class="block font-medium mb-1" :for="'{{this.name}}'">{{this.name}}</label>
        {{#if (eq this.type "string")}}
          <UInput
            v-model="form.{{this.name}}"
            id="{{this.name}}"
            type="text"
            :placeholder="'Enter {{this.name}}'"
            {{#if this.required}}required{{/if}}
            class="w-full"
          />
        {{else if (eq this.type "number")}}
          <UInput
            v-model.number="form.{{this.name}}"
            id="{{this.name}}"
            type="number"
            :placeholder="'Enter {{this.name}}'"
            {{#if this.required}}required{{/if}}
            class="w-full"
          />
        {{else if (eq this.type "boolean")}}
          <UToggle
            v-model="form.{{this.name}}"
            id="{{this.name}}"
            :label="'{{this.name}}'"
            class="mt-2"
          />
        {{else if (or (eq this.type "date") (eq this.type "datetime"))}}
          <UInput
            v-model="form.{{this.name}}"
            id="{{this.name}}"
            type="{{#if (eq this.type "datetime")}}datetime-local{{else}}date{{/if}}"
            {{#if this.required}}required{{/if}}
            class="w-full"
          />
        {{else if (eq this.type "select")}}
          <USelect
            v-model="form.{{this.name}}"
            id="{{this.name}}"
            :options="{{this.name}}Options"
            :placeholder="'Select {{this.name}}'"
            {{#if this.required}}required{{/if}}
            class="w-full"
          />
        {{else if (eq this.type "email")}}
          <UInput
            v-model="form.{{this.name}}"
            id="{{this.name}}"
            type="email"
            :placeholder="'Enter {{this.name}}'"
            {{#if this.required}}required{{/if}}
            class="w-full"
          />
        {{else if (eq this.type "textarea")}}
          <UTextarea
            v-model="form.{{this.name}}"
            id="{{this.name}}"
            :placeholder="'Enter {{this.name}}'"
            {{#if this.required}}required{{/if}}
            class="w-full"
            rows="3"
          />
        {{else}}
          <UInput
            v-model="form.{{this.name}}"
            id="{{this.name}}"
            type="text"
            :placeholder="'Enter {{this.name}}'"
            class="w-full"
          />
        {{/if}}
      </div>
      {{/each}}

      <div class="flex space-x-2">
        <UButton type="submit" color="primary">Save</UButton>
        <NuxtLink :to="`/{{name}}`">
          <UButton color="gray" variant="soft">Cancel</UButton>
        </NuxtLink>
      </div>
    </UForm>
  </UCard>
</template>

<script setup>
import { ref, computed, onMounted } from 'vue'
import { useRoute, useRouter } from 'vue-router'
import { use{{pascalCase name}} } from '~/composables/use{{pascalCase name}}'

const route = useRoute()
const router = useRouter()
const { fetchOne, create, update } = use{{pascalCase name}}()

const id = route.query.id ? Number(route.query.id) : null
const isEdit = computed(() => id !== null)

const form = ref({
  {{#each fields}}
  {{this.name}}: {{#if (eq this.type "string")}}''{{else if (eq this.type "number")}}0{{else if (eq this.type "boolean")}}false{{else if (or (eq this.type "date") (eq this.type "datetime"))}}''{{else if (eq this.type "select")}}''{{else if (eq this.type "email")}}''{{else if (eq this.type "textarea")}}''{{else}}null{{/if}},
  {{/each}}
})

{{#each fields}}
{{#if (eq this.type "select")}}
// Options for {{this.name}} select field
const {{this.name}}Options = ref([
  {{#if this.options}}
  {{#each this.options}}
  { label: '{{this.label}}', value: '{{this.value}}' },
  {{/each}}
  {{else}}
  { label: 'Option 1', value: 'option1' },
  { label: 'Option 2', value: 'option2' },
  { label: 'Option 3', value: 'option3' },
  {{/if}}
])
{{/if}}
{{/each}}

const formTitle = computed(() => (isEdit.value ? 'Edit {{pascalCase name}}' : 'Create {{pascalCase name}}'))

async function load() {
  if (isEdit.value) {
    const data = await fetchOne(id)
    // Format date fields for input
    {{#each fields}}
    {{#if (or (eq this.type "date") (eq this.type "datetime"))}}
    if (data.{{this.name}}) {
      data.{{this.name}} = new Date(data.{{this.name}}).toISOString().slice(0, {{#if (eq this.type "datetime")}}16{{else}}10{{/if}})
    }
    {{/if}}
    {{/each}}
    form.value = { ...form.value, ...data }
  }
}

async function submit() {
  try {
    // Prepare form data for submission
    const formData = { ...form.value }
    
    // Convert date fields to proper format
    {{#each fields}}
    {{#if (or (eq this.type "date") (eq this.type "datetime"))}}
    if (formData.{{this.name}}) {
      formData.{{this.name}} = new Date(formData.{{this.name}}).toISOString()
    }
    {{/if}}
    {{/each}}

    if (isEdit.value) {
      await update(id, formData)
    } else {
      await create(formData)
    }
    router.push('/{{name}}')
  } catch (err) {
    alert('Failed to save: ' + err.message)
  }
}

onMounted(load)
</script>
